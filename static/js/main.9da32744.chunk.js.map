{"version":3,"sources":["redux/actions.tsx","api/api.ts","constants.ts","components/card_list/card/Card.tsx","components/card_list/CardList.tsx","components/search_field/SearchField.tsx","components/error_boundary/ErrorBoundary.tsx","components/header/Header.tsx","components/main_page/MainPage.tsx","containers/App.tsx","serviceWorker.ts","redux/reducers.tsx","index.tsx"],"names":["requestRobots","dispatch","link","type","fetch","then","response","json","data","payload","catch","error","Card","name","id","email","className","src","alt","CardList","robots","map","user","i","key","SearchField","searchChange","aria-label","placeholder","onChange","ErrorBoundary","props","state","hasError","errorInfo","this","setState","children","Component","Header","nextProps","nextState","MainPage","filterRobots","filter","robot","toLowerCase","includes","searchField","trim","onRequestRobots","onSearchChange","isPending","App","connect","searchRobots","event","currentTarget","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9da32744.chunk.js","sourcesContent":["import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from '../constants';\r\nimport {apiCall} from \"../api/api\";\r\nimport {IActionsSearchField} from \"../types/types\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nexport const setSearchField = (text: string) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch: Dispatch<IActionsSearchField>) => {\r\n  dispatch({type: REQUEST_ROBOTS_PENDING});\r\n  apiCall('https://jsonplaceholder.typicode.com/users')\r\n    .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n    .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","export const apiCall = (link: string) =>\n    fetch(link).then(response => response.json())","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React from \"react\";\r\nimport './card.scss';\r\n\r\ninterface CardStatelessProps {\r\n  name: string,\r\n  email: string,\r\n  id: number\r\n}\r\n\r\nconst Card: React.SFC<CardStatelessProps> = ({name, id, email}) => {\r\n  return(\r\n    <div className={'card'}>\r\n      <img src={`https://robohash.org/${id}?set=set3`} alt=\"kitty\"/>\r\n      <h2 className={'card__header'}>{name}</h2>\r\n      <p className={'card_mail'}>{email}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"./card/Card\";\r\nimport {IRobotsState} from \"../../types/types\";\r\n\r\nfunction CardList({robots}:IRobotsState) {\r\n  return(\r\n    <div>\r\n      {\r\n        robots.map((user, i) => {\r\n          return <Card key={robots[i].id} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\r\n        })\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CardList;","import React from \"react\";\r\nimport './searchfield.scss';\r\nimport {ISearchFieldProps} from \"../../types/types\";\r\n\r\nconst SearchField = ({searchChange}:ISearchFieldProps) => {\r\n  return (\r\n    <div className={'searchfield'}>\r\n      <input aria-label={'Search Robots'} className={'searchfield__input'} type=\"search\" placeholder={'Search robots!'} onChange={searchChange}/>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default SearchField;","import React, {Component, ErrorInfo} from \"react\";\r\n\r\nclass ErrorBoundary extends Component<{}, {hasError: boolean}> {\r\n  constructor(props:object) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error:Error, errorInfo:ErrorInfo) {\r\n    this.setState({ hasError: true })\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Errooooor</h1>\r\n    }\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, {Component} from \"react\";\r\n\r\nclass Header extends Component {\r\n  shouldComponentUpdate(nextProps:Readonly<any>, nextState:Readonly<any>) {\r\n    return false;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>RoboSearch</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\nimport CardList from \"../card_list/CardList\";\nimport SearchField from \"../search_field/SearchField\";\nimport ErrorBoundary from \"../error_boundary/ErrorBoundary\";\nimport Header from \"../header/Header\";\nimport './mainpage.scss';\nimport {IMainProps, IRobotsParams, ISomeProps} from \"../../types/types\";\n\nclass MainPage extends Component<ISomeProps> {\n\n  componentDidMount():void {\n    this.props.onRequestRobots();\n  }\n\n  filterRobots = () => {\n    return this.props.robots.filter((robot:IRobotsParams) => {\n      return robot.name.toLowerCase().includes(this.props.searchField.toLowerCase().trim());\n    })\n  }\n\n  render():JSX.Element {\n    const { onSearchChange, isPending }:IMainProps = this.props;\n    return isPending ?\n      <h1>Loading</h1> :\n      (\n          <div className={'mainblock'}>\n            <Header/>\n            <SearchField searchChange={onSearchChange} />\n            <ErrorBoundary>\n              <CardList robots={this.filterRobots()} />\n            </ErrorBoundary>\n          </div>\n      );\n  }\n}\n\nexport default MainPage;","import React, { Component } from 'react';\nimport {connect} from \"react-redux\";\n\nimport {setSearchField, requestRobots} from \"../redux/actions\";\nimport MainPage from \"../components/main_page/MainPage\";\nimport {IAppBaseProps, IRobotsState, ISomeProps} from \"../types/types\";\n\nconst mapStateToProps = (state: IAppBaseProps) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    onSearchChange: (event: React.SyntheticEvent<HTMLInputElement>):void => dispatch(setSearchField(event.currentTarget.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component<ISomeProps, IRobotsState> {\n  render():JSX.Element {\n    return <MainPage {...this.props} />\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n        process.env.PUBLIC_URL,\n        window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n              'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                    'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n\n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n\n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n            response.status === 404 ||\n            (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n            'No internet connection found. App is running in offline mode.'\n        );\n      });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n  }\n}","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from '../constants';\r\nimport {IActionsSearchField} from \"../types/types\";\r\n\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state= initialStateSearch, action:IActionsSearchField) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, {searchField: action.payload});\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action:IActionsSearchField) => {\r\n  switch (action.type) {\r\n    case  REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, {isPending: true})\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {robots: action.payload, isPending: false})\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {error: action.payload, isPending: false})\r\n    default:\r\n      return state;\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from \"react-redux\";\nimport {createStore, applyMiddleware, combineReducers} from \"redux\";\n// import {createLogger} from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport './index.scss';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.scss';\nimport {searchRobots, requestRobots} from \"./redux/reducers\";\n\n// const logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}