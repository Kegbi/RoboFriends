{"version":3,"sources":["redux/actions.tsx","api/api.ts","constants.ts","components/card_list/card/Card.tsx","components/card_list/CardList.tsx","components/search_field/SearchField.tsx","components/error_boundary/ErrorBoundary.tsx","components/header/Header.tsx","components/main_page/MainPage.tsx","containers/App.tsx","serviceWorker.ts","redux/reducers.tsx","index.tsx"],"names":["requestRobots","dispatch","link","type","fetch","then","response","json","data","payload","catch","error","Card","name","id","email","className","src","alt","CardList","robots","map","user","i","key","SearchField","searchChange","aria-label","placeholder","onChange","ErrorBoundary","props","state","hasError","errorInfo","this","setState","children","Component","Header","nextProps","nextState","MainPage","filterRobots","filter","robot","toLowerCase","includes","searchField","trim","onRequestRobots","onSearchChange","isPending","App","connect","searchRobots","event","currentTarget","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"oUAeaA,EAAgB,kBAAM,SAClCC,GChBsB,IAACC,EDkBvBD,EAAS,CAAEE,KEhB0B,4BDFdD,EDmBf,6CClBRE,MAAMF,GAAMG,MAAK,SAACC,GAAD,OAAcA,EAASC,WDmBtCF,MAAK,SAACG,GAAD,OAAUP,EAAS,CAAEE,KEjBS,yBFiBqBM,QAASD,OACjEE,OAAM,SAACC,GAAD,OACNV,EAAS,CAAEE,KElBuB,wBFkBMM,QAASE,SGHrCC,G,MAV6B,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,MACxD,OACC,yBAAKC,UAAW,QACf,yBAAKC,IAAG,+BAA0BH,EAA1B,aAAyCI,IAAI,UACrD,wBAAIF,UAAW,gBAAiBH,GAChC,uBAAGG,UAAW,aAAcD,MCOhBI,MAjBf,YAA6C,IAAzBC,EAAwB,EAAxBA,OACnB,OACC,6BACEA,EAAOC,KAAI,SAACC,EAAMC,GAClB,OACC,kBAAC,EAAD,CACCC,IAAKJ,EAAOG,GAAGT,GACfA,GAAIM,EAAOG,GAAGT,GACdD,KAAMO,EAAOG,GAAGV,KAChBE,MAAOK,EAAOG,GAAGR,aCKRU,G,MAdK,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,aACtB,OACC,yBAAKV,UAAW,eACf,2BACCW,aAAY,gBACZX,UAAW,qBACXb,KAAK,SACLyB,YAAa,iBACbC,SAAUH,OCUCI,E,kDAnBd,WAAYC,GAAgB,IAAD,8BAC1B,cAAMA,IACDC,MAAQ,CACZC,UAAU,GAHe,E,8DAOTtB,EAAcuB,GAC/BC,KAAKC,SAAS,CAAEH,UAAU,M,+BAI1B,OAAIE,KAAKH,MAAMC,SACP,yCAEDE,KAAKJ,MAAMM,a,GAhBQC,aCcbC,E,oLAbQC,EAA0BC,GAC/C,OAAO,I,+BAIP,OACC,6BACC,+C,GARiBH,aCmCNI,G,kNAxBdC,aAAe,WACd,OAAO,EAAKZ,MAAMX,OAAOwB,QAAO,SAACC,GAChC,OAAOA,EAAMhC,KACXiC,cACAC,SAAS,EAAKhB,MAAMiB,YAAYF,cAAcG,Y,kEAPjDd,KAAKJ,MAAMmB,oB,+BAWW,IAAD,EAC6Bf,KAAKJ,MAA/CoB,EADa,EACbA,eACR,OAFqB,EACGC,UAEvB,uCAEA,yBAAKpC,UAAW,aACf,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAaU,aAAcyB,IAC3B,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAU/B,OAAQe,KAAKQ,uB,GAtBLL,cCgBjBe,E,uKAEJ,OAAO,kBAAC,EAAalB,KAAKJ,W,GAFVO,aAMHgB,eAvBS,SAACtB,GACxB,MAAO,CACNgB,YAAahB,EAAMuB,aAAaP,YAChC5B,OAAQY,EAAMhC,cAAcoB,OAC5BgC,UAAWpB,EAAMhC,cAAcoD,UAC/BzC,MAAOqB,EAAMhC,cAAcW,UAIF,SAACV,GAC3B,MAAO,CACNkD,eAAgB,SAACK,GAAD,OACfvD,ETT8C,CAChDE,KEXkC,sBFYlCM,QSO0B+C,EAAMC,cAAcC,SAC7CR,gBAAiB,kBAAMjD,EAASD,SAUnBsD,CAA6CD,GClBtDM,EAAcC,QACU,cAA7BC,OAAOC,SAASC,UAEc,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACxB,2DA2CH,SAASC,EAAgBC,EAAeC,GACvCC,UAAUC,cACRC,SAASJ,GACT7D,MAAK,SAACkE,GACNA,EAAaC,cAAgB,WAC5B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACD,cAA3BF,EAAiBzC,QAChBoC,UAAUC,cAAcO,YAI3BC,QAAQC,IACP,iHAKGX,GAAUA,EAAOY,UACpBZ,EAAOY,SAASR,KAMjBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACpBb,EAAOa,UAAUT,WAOtB7D,OAAM,SAACC,GACPkE,QAAQlE,MAAM,4CAA6CA,MC7F9D,IAAMsE,EAAqB,CAC1BjC,YAAa,IAeRkC,EAAqB,CAC1B9B,WAAW,EACXhC,OAAQ,GACRT,MAAO,ICbFwE,EAAcC,YAAgB,CAAE7B,aDFV,WAGtB,IAFLvB,EAEI,uDAFIiD,EACRI,EACI,uCACJ,OAAQA,EAAOlF,MACd,ITjBiC,sBSkBhC,OAAOmF,OAAOC,OAAO,GAAIvD,EAAO,CAAEgB,YAAaqC,EAAO5E,UACvD,QACC,OAAOuB,ICN0ChC,cDgBvB,WAGvB,IAFLgC,EAEI,uDAFIkD,EACRG,EACI,uCACJ,OAAQA,EAAOlF,MACd,ITjCoC,yBSkCnC,OAAOmF,OAAOC,OAAO,GAAIvD,EAAO,CAAEoB,WAAW,IAC9C,ITlCoC,yBSmCnC,OAAOkC,OAAOC,OAAO,GAAIvD,EAAO,CAC/BZ,OAAQiE,EAAO5E,QACf2C,WAAW,IAEb,ITtCmC,wBSuClC,OAAOkC,OAAOC,OAAO,GAAIvD,EAAO,CAC/BrB,MAAO0E,EAAO5E,QACd2C,WAAW,IAEb,QACC,OAAOpB,MCjCJwD,EAAQC,YAAYN,EAAaO,YAAgBC,MAEvDC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,IAAD,CAAUN,MAAOA,GAChB,kBAAC,EAAD,QAGFO,SAASC,eAAe,SFIlB,SAAkB7B,GACxB,GAA6C,kBAAmBC,UAAW,CAG1E,GADkB,IAAI6B,IAAIC,cAAwBrC,OAAOC,SAASqC,MACpDC,SAAWvC,OAAOC,SAASsC,OAIxC,OAGDvC,OAAOwC,iBAAiB,QAAQ,WAC/B,IAAMnC,EAAK,UAAMgC,cAAN,sBAEPvC,IAgEP,SAAiCO,EAAeC,GAE/C/D,MAAM8D,EAAO,CACZoC,QAAS,CAAE,iBAAkB,YAE5BjG,MAAK,SAACC,GAEN,IAAMiG,EAAcjG,EAASgG,QAAQE,IAAI,gBAEpB,MAApBlG,EAASmG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CtC,UAAUC,cAAcsC,MAAMtG,MAAK,SAACkE,GACnCA,EAAaqC,aAAavG,MAAK,WAC9BwD,OAAOC,SAAS+C,eAKlB5C,EAAgBC,EAAOC,MAGxBzD,OAAM,WACNmE,QAAQC,IACP,oEAvFAgC,CAAwB5C,EAAOC,GAI/BC,UAAUC,cAAcsC,MAAMtG,MAAK,WAClCwE,QAAQC,IACP,iHAMFb,EAAgBC,EAAOC,OE1B3BE,K","file":"static/js/main.7dc0fe66.chunk.js","sourcesContent":["import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED,\r\n} from \"../constants\";\r\nimport { apiCall } from \"../api/api\";\r\nimport { IActionsSearchField } from \"../types/types\";\r\nimport { Dispatch } from \"redux\";\r\n\r\nexport const setSearchField = (text: string) => ({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text,\r\n});\r\n\r\nexport const requestRobots = () => (\r\n\tdispatch: Dispatch<IActionsSearchField>\r\n) => {\r\n\tdispatch({ type: REQUEST_ROBOTS_PENDING });\r\n\tapiCall(\"https://jsonplaceholder.typicode.com/users\")\r\n\t\t.then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n\t\t.catch((error) =>\r\n\t\t\tdispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\r\n\t\t);\r\n};\r\n","export const apiCall = (link: string) =>\n\tfetch(link).then((response) => response.json());\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\n\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\r\n","import React from \"react\";\r\nimport \"./card.scss\";\r\n\r\ninterface CardStatelessProps {\r\n\tname: string;\r\n\temail: string;\r\n\tid: number;\r\n}\r\n\r\nconst Card: React.SFC<CardStatelessProps> = ({ name, id, email }) => {\r\n\treturn (\r\n\t\t<div className={\"card\"}>\r\n\t\t\t<img src={`https://robohash.org/${id}?set=set3`} alt=\"kitty\" />\r\n\t\t\t<h2 className={\"card__header\"}>{name}</h2>\r\n\t\t\t<p className={\"card_mail\"}>{email}</p>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./card/Card\";\r\nimport { IRobotsState } from \"../../types/types\";\r\n\r\nfunction CardList({ robots }: IRobotsState) {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{robots.map((user, i) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Card\r\n\t\t\t\t\t\tkey={robots[i].id}\r\n\t\t\t\t\t\tid={robots[i].id}\r\n\t\t\t\t\t\tname={robots[i].name}\r\n\t\t\t\t\t\temail={robots[i].email}\r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\t\t\t})}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\nimport \"./searchfield.scss\";\r\nimport { ISearchFieldProps } from \"../../types/types\";\r\n\r\nconst SearchField = ({ searchChange }: ISearchFieldProps) => {\r\n\treturn (\r\n\t\t<div className={\"searchfield\"}>\r\n\t\t\t<input\r\n\t\t\t\taria-label={\"Search Robots\"}\r\n\t\t\t\tclassName={\"searchfield__input\"}\r\n\t\t\t\ttype=\"search\"\r\n\t\t\t\tplaceholder={\"Search robots!\"}\r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default SearchField;\r\n","import React, { Component, ErrorInfo } from \"react\";\r\n\r\nclass ErrorBoundary extends Component<{}, { hasError: boolean }> {\r\n\tconstructor(props: object) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false,\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidCatch(error: Error, errorInfo: ErrorInfo) {\r\n\t\tthis.setState({ hasError: true });\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.hasError) {\r\n\t\t\treturn <h1>Errooooor</h1>;\r\n\t\t}\r\n\t\treturn this.props.children;\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Header extends Component {\r\n\tshouldComponentUpdate(nextProps: Readonly<any>, nextState: Readonly<any>) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h1>RoboSearch</h1>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\nimport CardList from \"../card_list/CardList\";\nimport SearchField from \"../search_field/SearchField\";\nimport ErrorBoundary from \"../error_boundary/ErrorBoundary\";\nimport Header from \"../header/Header\";\nimport \"./mainpage.scss\";\nimport { IMainProps, IRobotsParams, ISomeProps } from \"../../types/types\";\n\nclass MainPage extends Component<ISomeProps> {\n\tcomponentDidMount(): void {\n\t\tthis.props.onRequestRobots();\n\t}\n\n\tfilterRobots = () => {\n\t\treturn this.props.robots.filter((robot: IRobotsParams) => {\n\t\t\treturn robot.name\n\t\t\t\t.toLowerCase()\n\t\t\t\t.includes(this.props.searchField.toLowerCase().trim());\n\t\t});\n\t};\n\n\trender(): JSX.Element {\n\t\tconst { onSearchChange, isPending }: IMainProps = this.props;\n\t\treturn isPending ? (\n\t\t\t<h1>Loading</h1>\n\t\t) : (\n\t\t\t<div className={\"mainblock\"}>\n\t\t\t\t<Header />\n\t\t\t\t<SearchField searchChange={onSearchChange} />\n\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t<CardList robots={this.filterRobots()} />\n\t\t\t\t</ErrorBoundary>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default MainPage;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { setSearchField, requestRobots } from \"../redux/actions\";\nimport MainPage from \"../components/main_page/MainPage\";\nimport { IAppBaseProps, IRobotsState, ISomeProps } from \"../types/types\";\n\nconst mapStateToProps = (state: IAppBaseProps) => {\n\treturn {\n\t\tsearchField: state.searchRobots.searchField,\n\t\trobots: state.requestRobots.robots,\n\t\tisPending: state.requestRobots.isPending,\n\t\terror: state.requestRobots.error,\n\t};\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n\treturn {\n\t\tonSearchChange: (event: React.SyntheticEvent<HTMLInputElement>): void =>\n\t\t\tdispatch(setSearchField(event.currentTarget.value)),\n\t\tonRequestRobots: () => dispatch(requestRobots()),\n\t};\n};\n\nclass App extends Component<ISomeProps, IRobotsState> {\n\trender(): JSX.Element {\n\t\treturn <MainPage {...this.props} />;\n\t}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === \"localhost\" ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === \"[::1]\" ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t\t)\n);\n\ntype Config = {\n\tonSuccess?: (registration: ServiceWorkerRegistration) => void;\n\tonUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n\tif (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener(\"load\", () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\"This web app is being served cache-first by a service \" +\n\t\t\t\t\t\t\t\"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === \"installed\") {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t\"New content is available and will be used when all \" +\n\t\t\t\t\t\t\t\t\t\"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log(\"Content is cached for offline use.\");\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error(\"Error during service worker registration:\", error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { \"Service-Worker\": \"script\" },\n\t})\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get(\"content-type\");\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf(\"javascript\") === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t\"No internet connection found. App is running in offline mode.\"\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif (\"serviceWorker\" in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then((registration) => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED,\r\n} from \"../constants\";\r\nimport { IActionsSearchField } from \"../types/types\";\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: \"\",\r\n};\r\n\r\nexport const searchRobots = (\r\n\tstate = initialStateSearch,\r\n\taction: IActionsSearchField\r\n) => {\r\n\tswitch (action.type) {\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state, { searchField: action.payload });\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: \"\",\r\n};\r\n\r\nexport const requestRobots = (\r\n\tstate = initialStateRobots,\r\n\taction: IActionsSearchField\r\n) => {\r\n\tswitch (action.type) {\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({}, state, { isPending: true });\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, {\r\n\t\t\t\trobots: action.payload,\r\n\t\t\t\tisPending: false,\r\n\t\t\t});\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({}, state, {\r\n\t\t\t\terror: action.payload,\r\n\t\t\t\tisPending: false,\r\n\t\t\t});\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\n// import {createLogger} from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport \"./index.scss\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.scss\";\nimport { searchRobots, requestRobots } from \"./redux/reducers\";\n\n// const logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t<App />\n\t\t</Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}