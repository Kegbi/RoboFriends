{"version":3,"sources":["components/card_list/card/Card.js","components/card_list/CardList.js","components/search_field/SearchField.js","components/error_boundary/ErrorBoundary.js","components/header/Header.js","containers/App.js","redux/actions.js","constants.js","serviceWorker.js","redux/reducers.js","index.js"],"names":["Card","name","id","email","className","src","alt","CardList","robots","map","user","i","key","SearchField","searchChange","type","placeholder","onChange","ErrorBoundary","props","state","hasError","error","errorInfo","this","setState","children","Component","Header","nextProps","nextState","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","trim","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4708768f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './card.scss';\r\n\r\nfunction Card({name, id, email}) {\r\n  return(\r\n    <div className={'card'}>\r\n      <img src={`https://robohash.org/${id}?size=200x200`} alt=\"kitty\"/>\r\n      <h2 className={'card__header'}>{name}</h2>\r\n      <p className={'card_mail'}>{email}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"./card/Card\";\r\n\r\nfunction CardList({robots}) {\r\n  return(\r\n    <div>\r\n      {\r\n        robots.map((user, i) => {\r\n          return <Card key={robots[i].id} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\r\n        })\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CardList;","import React from \"react\";\r\nimport './searchfield.scss';\r\n\r\nfunction SearchField({searchChange}) {\r\n  return (\r\n    <div className={'searchfield'}>\r\n      <input className={'searchfield__input'} type=\"search\" placeholder={'Search robots!'} onChange={searchChange}/>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default SearchField;","import React, {Component} from \"react\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    this.setState({ hasError: true })\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Errooooor</h1>\r\n    }\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, {Component} from \"react\";\r\n\r\nclass Header extends Component {\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return false;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>RoboSearch</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\nimport {connect} from \"react-redux\";\nimport CardList from \"../components/card_list/CardList\";\nimport SearchField from \"../components/search_field/SearchField\";\nimport ErrorBoundary from \"../components/error_boundary/ErrorBoundary\";\nimport Header from \"../components/header/Header\";\nimport './App.scss';\n\nimport {setSearchField, requestRobots} from \"../redux/actions\";\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.onRequestRobots()\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase().trim());\n    })\n    return isPending ?\n    <h1>Loading</h1> :\n    (\n     <div className={'mainblock'}>\n       <Header/>\n       <SearchField searchChange={onSearchChange} />\n       <ErrorBoundary>\n         <CardList robots={filteredRobots} />\n       </ErrorBoundary>\n     </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from '../constants';\r\n\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({type: REQUEST_ROBOTS_PENDING});\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n    .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from '../constants';\r\n\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, {searchField: action.payload});\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n  switch (action.type) {\r\n    case  REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, {isPending: true})\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {robots: action.payload, isPending: false})\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {error: action.payload, isPending: false})\r\n    default:\r\n      return state;\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from \"react-redux\";\nimport {createStore, applyMiddleware, combineReducers} from \"redux\";\n// import {createLogger} from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport './index.scss';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.scss';\nimport {searchRobots, requestRobots} from \"./redux/reducers\";\n\n// const logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}